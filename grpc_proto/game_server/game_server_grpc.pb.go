// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.0
// source: game_server.proto

package game_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GameServerService_Click_FullMethodName  = "/game_server.GameServerService/Click"
	GameServerService_Attack_FullMethodName = "/game_server.GameServerService/Attack"
)

// GameServerServiceClient is the client API for GameServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerServiceClient interface {
	Click(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*ClickResponse, error)
	Attack(ctx context.Context, in *AttackRequest, opts ...grpc.CallOption) (*AttackResponse, error)
}

type gameServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerServiceClient(cc grpc.ClientConnInterface) GameServerServiceClient {
	return &gameServerServiceClient{cc}
}

func (c *gameServerServiceClient) Click(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*ClickResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClickResponse)
	err := c.cc.Invoke(ctx, GameServerService_Click_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) Attack(ctx context.Context, in *AttackRequest, opts ...grpc.CallOption) (*AttackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttackResponse)
	err := c.cc.Invoke(ctx, GameServerService_Attack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerServiceServer is the server API for GameServerService service.
// All implementations must embed UnimplementedGameServerServiceServer
// for forward compatibility
type GameServerServiceServer interface {
	Click(context.Context, *ClickRequest) (*ClickResponse, error)
	Attack(context.Context, *AttackRequest) (*AttackResponse, error)
	mustEmbedUnimplementedGameServerServiceServer()
}

// UnimplementedGameServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServerServiceServer struct {
}

func (UnimplementedGameServerServiceServer) Click(context.Context, *ClickRequest) (*ClickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Click not implemented")
}
func (UnimplementedGameServerServiceServer) Attack(context.Context, *AttackRequest) (*AttackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attack not implemented")
}
func (UnimplementedGameServerServiceServer) mustEmbedUnimplementedGameServerServiceServer() {}

// UnsafeGameServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerServiceServer will
// result in compilation errors.
type UnsafeGameServerServiceServer interface {
	mustEmbedUnimplementedGameServerServiceServer()
}

func RegisterGameServerServiceServer(s grpc.ServiceRegistrar, srv GameServerServiceServer) {
	s.RegisterService(&GameServerService_ServiceDesc, srv)
}

func _GameServerService_Click_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServiceServer).Click(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerService_Click_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServiceServer).Click(ctx, req.(*ClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerService_Attack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServiceServer).Attack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerService_Attack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServiceServer).Attack(ctx, req.(*AttackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServerService_ServiceDesc is the grpc.ServiceDesc for GameServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game_server.GameServerService",
	HandlerType: (*GameServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Click",
			Handler:    _GameServerService_Click_Handler,
		},
		{
			MethodName: "Attack",
			Handler:    _GameServerService_Attack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_server.proto",
}
